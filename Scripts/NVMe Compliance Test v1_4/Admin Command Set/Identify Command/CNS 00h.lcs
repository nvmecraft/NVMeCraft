NVMeDevice dev;
Serilog.Core.Logger log;

public int ScriptMain(int a, int b)
{
    dev = FromEngine.dev;
    log = FromEngine.log;
    //dev.CreateMemoryManager();
    
    DataPointer dataPointer = new DataPointer(dev.MM, "SQ Size", (UInt32)4096, true, "", 0, false, false);
    ADMIN_COMMAND_SQE sqe = new ADMIN_COMMAND_SQE();
    
    sqe.ClearSqe();
    
    Console.WriteLine(ByteArrayToString(sqe.sqeArray));
    sqe.OPC = (byte)EnumAdminCdw0Opcode.Identify;
    Console.WriteLine(ByteArrayToString(sqe.sqeArray));
    
    
    
    
    sqe.PRP1 = dataPointer.PrpEntry1;
    Console.WriteLine(ByteArrayToString(sqe.sqeArray));
    /*
    sqe.CDW10 = sqe.CDW10 | (((UInt32)numEntries - 1) << 16);
    sqe.CDW10 = sqe.CDW10 | (UInt32)ioSqId;

    sqe.CDW11 = sqe.CDW11 | ((UInt32)ioSqId << 16);
    sqe.CDW11 = sqe.CDW11 | (2 << 1);
    sqe.CDW11 = sqe.CDW11 | (1 << 0);
    */
    dev.SubmitAdminCommand(sqe, dataPointer);
    
    
    
    log.Information("CAP.DSTRD - CHECK");
    
    UInt64 DSTRD = dev.controllerRegs.CAP.DSTRD;
    
    log.Information("CAP.DSTRD - 0x{0:X2}, The stride is specified as {1} in bytes.", DSTRD, Math.Pow(2, (2 + DSTRD)));
    
    PassOrFail(DSTRD);
   
    return 0;
}

public static string ByteArrayToString(byte[] ba)
{
    System.Text.StringBuilder hex = new System.Text.StringBuilder();
    foreach (UInt32 b in ba)
        hex.AppendFormat("{0:X2} ", b);
    return hex.ToString();
}

public void PassOrFail(UInt64 DSTRD)
{
    log.Information("CAP.DSTRD - END");
}